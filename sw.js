this.addEventListener('fetch',function(e){e.respondWith(Response.redirect('data:text/html;https://safemega/;charset=utf-8,<!doctype html><meta charset=utf-8><title>Safe MEGA</title><meta name=mobile-web-app-capable content=yes><meta content=%22IE=edge%22 http-equiv=X-UA-Compatible><meta name=viewport content=%22width=device-width, initial-scale=1%22><style>body{margin:40px auto;max-width:650px;line-height:1.6;font-size:18px;color:%23444;padding:0 10px}h1,h2,h3{line-height:1.2}h1 small,output{display:block}.view{display:none}.current.view{display:block}.important{color:%23D22}textarea{width:100%25}</style><header><h1><a href=%23!extra-safe-version>Extra</a> Safe MEGA<small>Add passwords to MEGA folders</small></h1></header><div id=main-view class=%22current view%22><p>MEGA is created to be a end to end encrypted file storage, but it only allows random generated keys. If it increases safety by avoiding unsafe keys in the other hand encourages those keys being shared in plain text.</p><p>This web application is created to add an interface for adding passwords for folders. While file links can%27t be changed by the user because those links handle both decryption and integrity, in the other hand folder links only handles decryption making possible to the user, <a href=%23!generate-key>using the developer tools</a>, change the encryption key arbitrarily.</p><p>While sharing the folder instead of sharing an <code>https://mega.nz/%23F!handler!key</code> link, replace it which <code>https://safeme.ga/%23handler</code>. After visiting this link, based on typed password, the user will be redirected to MEGA folder with the generated decryption key.</p><p class=important>It will prevent the decryption key being delivered in plain text by the share link!</p><p>As it%27s an single page application both the password and decryption key are never send to any server. For increased security this page works offline and <a id=download-link download=safemega.html href=.>can be downloaded</a>.</p><p>Important: this is a proof of concept with the objective of developers implementing this feature in MEGA itself and other tools based in MEGA. There isn%27t an intention of keeping it forever as a developer console hack, or even requiring other clients or extensions to be build for that.</p><p>This page code is written in ES6, so support for it is required. As PBKDF2-SHA-1 is used for key derivation. WebCrypto support is also required too.</p><p>For issues and more info <a href=https://github.com/qgustavor/safe-mega>check GitHub page</a>.</p></div><div id=generate-key class=view><p>MEGA functions can be overwritten using developer tools. So, in order to choose which key is going to be used when sharing a folder, and allowing to use an PBKDF2 derived encryption key, developer tools.</p><p>First share a empty folder normally. It will generate an random encryption key.</p><p>Generate a key based in share handler (the first part of the shared URL, between exclamations) and the password of your preference:</p><form id=manual-generate><input type=text placeholder=Handler><input type=password placeholder=Password><input type=submit value=%22Generate key%22><output></output></form><p>Update folder password by opening the shared folder in MEGA then using this code in developer console:</p><code id=dev-code>[code will be shown after generating key]</code><p>Finally add files to the folder normally and it%27s done.</p><p><a href=%23>More info →</a></p></div><div id=decryption-view class=view><p>Enter password to decrypt folder:</p><form id=auto-generate><input type=password placeholder=Password><input type=submit value=%22Decrypt folder%22></form><p><a href=%23>More info →</a></p></div><div id=safer-view class=view><p>You%27re using the extra safe version of Safe MEGA</p><p>All the page code is contained in a Data URI, which can be bookmarked making this page impossible to be updated or took down.</p><p>It means if me (the developer), GitHub (the hosting provider) or the NSA (you know who they are) want to hack you thought this tool it will not me possible.</p><p>How to use the bookmarked version? Follow <a href=%23>the instructions</a> and replace <code>https://safeme.ga/</code> with the code below:</p><p><textarea id=source-code></textarea></p><p>Don%27t worry if it%27s hard to do, if you%27re seeing this page is because your browser can handle that for you via Service Workers.</p><p style=color:gray;font-size:.5em>(of course the developers from your browser and operating system can still hack you via auto updates. Do you trust %22don%27t be evil%22? If it stop working in future blame then.)</p><p><a href=%23>More info →</a></p></div><div id=downloaded-view class=view><p>You%27re using the downloaded version of Safe MEGA</p><p>You know how it%27s safe? The entire source code of this application is in control of you!</p><p><span class=important>But there is has a small problem:</span> usually people link to <code>https://safeme.ga/</code>, not to your download folder.</p><p>I know, I could write an extension for some browser and publish it somewhere making it easy to be took down and censored...</p><p>So, what to do? Simple, just add the handler in your browser address bar, like this: <code>https://safeme.ga/%23handler</code> → <code>.../safemega.html%23handler</code>. <p><a href=%23>More info →</a></p></div><script>(function(){function n(a){switch(a){case %22SHA-1%22:return 160;case %22SHA-256%22:return 256;case %22SHA-384%22:return 384;case %22SHA-512%22:return 512}throw Error(%22Unsupported hash function%22);}function p(a,b,c,d){a=(new TextEncoder(%22utf-8%22)).encode(a);return crypto.subtle.importKey(%22raw%22,a,%22PBKDF2%22,!1,[%22deriveBits%22]).then(function(a){var e=n(c);return crypto.subtle.deriveBits({name:%22PBKDF2%22,hash:c,salt:b,iterations:d},a,e)})}function f(a,b){var c=(new TextEncoder(%22utf-8%22)).encode(a);return crypto.subtle.digest({name:%22SHA-256%22},c).then(function(a){return p(b,a,%22SHA-1%22,181020)})}function g(){c.forEach(function(a){return a.classList.remove(%22current%22)});%22%23!generate-key%22===location.hash?c[1].classList.add(%22current%22):%22%23!extra-safe-version%22===location.hash?c[3].classList.add(%22current%22):1>=location.hash.length?%22file:%22!==location.protocol||h?c[0].classList.add(%22current%22):(c[4].classList.add(%22current%22),h=!0):c[2].classList.add(%22current%22)}function k(a){alert(%22Your browser required you to download the offline version before continuing.\nDon%27t worry, I%27m not a bad file, you even can check the my source code, audit me, fell in love with me... well anything, I%27m just a HTML file.%22);l.click()}function m(a){a=new Uint8Array(a);var b,c=a.length,d=%22%22;for(b=0;b<c;b+=3)d+=e[a[b]>>2],d+=e[(a[b]%263)<<4|a[b+1]>>4],d+=e[(a[b+1]%2615)<<2|a[b+2]>>6],d+=e[a[b+2]%2663];return d.substr(0,22)}function q(a){a=%22https://mega.nz/%23F!%22+location.hash.substr(1)+%22!%22+m(a);location.href=a}function r(a){a=m(a);document.getElementsByTagName(%22output%22)[0].innerHTML=%22Generated key: %22+a;document.getElementById(%22dev-code%22).innerHTML=%22u_sharekeys[page.substr(3)] = base64_to_a32(%27%22+a+%22%27);%22}var c=[document.getElementById(%22main-view%22),document.getElementById(%22generate-key%22),document.getElementById(%22decryption-view%22),document.getElementById(%22safer-view%22),document.getElementById(%22downloaded-view%22)],h=!1,e=%22ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_%22;window.addEventListener(%22hashchange%22,g);document.getElementById(%22auto-generate%22).addEventListener(%22submit%22,function(a){a.preventDefault();f(location.hash.substr(1),document.querySelector(%22%23auto-generate input%22).value).then(q,k)});document.getElementById(%22manual-generate%22).addEventListener(%22submit%22,function(a){a.preventDefault();f(document.querySelector(%27%23manual-generate input[type=%22text%22]%27).value,document.querySelector(%27%23manual-generate input[type=%22password%22]%27).value).then(r,k)});g();document.getElementById(%22source-code%22).textContent=location.href.substr(0,location.href.length-location.hash.length);var l=document.getElementById(%22download-link%22);l.href=URL.createObjectURL(new Blob([decodeURIComponent(location.href.split(%22;charset=utf-8,%22).slice(1).join(%22;charset=utf-8,%22))]))})();</script><!--',301))});